// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.4.1
// Schema file: msg.xsd
// Creation Date: 2012-06-28 오후 9:58:31
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace RTW
{

	public struct Declarations
	{
		public const string SchemaVersion = "";
	}


	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ItemCollection : ArrayList
	{
		public Item Add(Item obj)
		{
			base.Add(obj);
			return obj;
		}

		public Item Add()
		{
			return Add(new Item());
		}

		public void Insert(int index, Item obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Item obj)
		{
			base.Remove(obj);
		}

		new public Item this[int index]
		{
			get { return (Item) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class InfoCollection : ArrayList
	{
		public Info Add(Info obj)
		{
			base.Add(obj);
			return obj;
		}

		public Info Add()
		{
			return Add(new Info());
		}

		public void Insert(int index, Info obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Info obj)
		{
			base.Remove(obj);
		}

		new public Info this[int index]
		{
			get { return (Info) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class InitValueCollection : ArrayList
	{
		public byte Add(byte obj)
		{
			base.Add(obj);
			return obj;
		}

		public byte Add()
		{
			return Add(new byte());
		}

		public void Insert(int index, byte obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(byte obj)
		{
			base.Remove(obj);
		}

		new public byte this[int index]
		{
			get { return (byte) base[index]; }
			set { base[index] = value; }
		}
	}



	[XmlRoot(ElementName="Packet",IsNullable=false),Serializable]
	public class Packet
	{

		[XmlElement(Type=typeof(Infos),ElementName="Infos",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Infos __Infos;
		
		[XmlIgnore]
		public Infos Infos
		{
			get
			{
				if (__Infos == null) __Infos = new Infos();		
				return __Infos;
			}
			set {__Infos = value;}
		}

		[XmlElement(Type=typeof(Items),ElementName="Items",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Items __Items;
		
		[XmlIgnore]
		public Items Items
		{
			get
			{
				if (__Items == null) __Items = new Items();		
				return __Items;
			}
			set {__Items = value;}
		}

		public Packet()
		{
		}
	}


	[XmlType(TypeName="Infos"),Serializable]
	public class Infos
	{
		[System.Runtime.InteropServices.DispIdAttribute(-4)]
		public IEnumerator GetEnumerator() 
		{
            return InfoCollection.GetEnumerator();
		}

		public Info Add(Info obj)
		{
			return InfoCollection.Add(obj);
		}

		[XmlIgnore]
		public Info this[int index]
		{
			get { return (Info) InfoCollection[index]; }
		}

		[XmlIgnore]
        public int Count 
		{
            get { return InfoCollection.Count; }
        }

        public void Clear()
		{
			InfoCollection.Clear();
        }

		public Info Remove(int index) 
		{ 
            Info obj = InfoCollection[index];
            InfoCollection.Remove(obj);
			return obj;
        }

        public void Remove(object obj)
		{
            InfoCollection.Remove(obj);
        }

		[XmlAttribute(AttributeName="Comment",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __Comment;
		
		[XmlIgnore]
		public string Comment
		{ 
			get { return __Comment; }
			set { __Comment = value; }
		}

		[XmlAttribute(AttributeName="LastModified",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __LastModified;
		
		[XmlIgnore]
		public string LastModified
		{ 
			get { return __LastModified; }
			set { __LastModified = value; }
		}

		[XmlElement(Type=typeof(Info),ElementName="Info",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public InfoCollection __InfoCollection;
		
		[XmlIgnore]
		public InfoCollection InfoCollection
		{
			get
			{
				if (__InfoCollection == null) __InfoCollection = new InfoCollection();
				return __InfoCollection;
			}
			set {__InfoCollection = value;}
		}

		public Infos()
		{
		}
	}


	[XmlType(TypeName="Info"),Serializable]
	public class Info
	{

		public Info()
		{
		}
	}


	[XmlType(TypeName="Items"),Serializable]
	public class Items
	{
		[System.Runtime.InteropServices.DispIdAttribute(-4)]
		public IEnumerator GetEnumerator() 
		{
            return ItemCollection.GetEnumerator();
		}

		public Item Add(Item obj)
		{
			return ItemCollection.Add(obj);
		}

		[XmlIgnore]
		public Item this[int index]
		{
			get { return (Item) ItemCollection[index]; }
		}

		[XmlIgnore]
        public int Count 
		{
            get { return ItemCollection.Count; }
        }

        public void Clear()
		{
			ItemCollection.Clear();
        }

		public Item Remove(int index) 
		{ 
            Item obj = ItemCollection[index];
            ItemCollection.Remove(obj);
			return obj;
        }

        public void Remove(object obj)
		{
            ItemCollection.Remove(obj);
        }

		[XmlElement(Type=typeof(Item),ElementName="Item",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ItemCollection __ItemCollection;
		
		[XmlIgnore]
		public ItemCollection ItemCollection
		{
			get
			{
				if (__ItemCollection == null) __ItemCollection = new ItemCollection();
				return __ItemCollection;
			}
			set {__ItemCollection = value;}
		}

		public Items()
		{
		}
	}


	[XmlType(TypeName="Item"),Serializable]
	public class Item
	{
		[System.Runtime.InteropServices.DispIdAttribute(-4)]
		public IEnumerator GetEnumerator() 
		{
            return InitValueCollection.GetEnumerator();
		}

		public byte Add(byte obj)
		{
			return InitValueCollection.Add(obj);
		}

		[XmlIgnore]
		public byte this[int index]
		{
			get { return (byte) InitValueCollection[index]; }
		}

		[XmlIgnore]
        public int Count 
		{
            get { return InitValueCollection.Count; }
        }

        public void Clear()
		{
			InitValueCollection.Clear();
        }

		public byte Remove(int index) 
		{ 
            byte obj = InitValueCollection[index];
            InitValueCollection.Remove(obj);
			return obj;
        }

        public void Remove(object obj)
		{
            InitValueCollection.Remove(obj);
        }

		[XmlAttribute(AttributeName="Name",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __Name;
		
		[XmlIgnore]
		public string Name
		{ 
			get { return __Name; }
			set { __Name = value; }
		}

		[XmlAttribute(AttributeName="Type",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __Type;
		
		[XmlIgnore]
		public string Type
		{ 
			get { return __Type; }
			set { __Type = value; }
		}

		[XmlAttribute(AttributeName="IsSwap",Form=XmlSchemaForm.Unqualified,DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __IsSwap;
		
		[XmlIgnore]
		public string IsSwap
		{ 
			get { return __IsSwap; }
			set { __IsSwap = value; }
		}

		[XmlAttribute(AttributeName="Size",Form=XmlSchemaForm.Unqualified,DataType="unsignedByte")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public byte __Size;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __SizeSpecified;
		
		[XmlIgnore]
		public byte Size
		{ 
			get { return __Size; }
			set { __Size = value; __SizeSpecified = true; }
		}

		[XmlElement(Type=typeof(byte),ElementName="InitValue",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedByte")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public InitValueCollection __InitValueCollection;
		
		[XmlIgnore]
		public InitValueCollection InitValueCollection
		{
			get
			{
				if (__InitValueCollection == null) __InitValueCollection = new InitValueCollection();
				return __InitValueCollection;
			}
			set {__InitValueCollection = value;}
		}

		public Item()
		{
		}
	}
}
